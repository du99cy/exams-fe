{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@core/authentication/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport let ErrorInterceptor = /*#__PURE__*/(() => {\n  class ErrorInterceptor {\n    constructor(authService, router) {\n      this.authService = authService;\n      this.router = router;\n    }\n\n    intercept(request, next) {\n      return next.handle(request).pipe(catchError(err => {\n        //401 is Not Authorization 403 Expire Token\n        if ([401, 403].includes(err.status)) {\n          this.authService.logout();\n        } //const error = (err && err.error && err.error.message) || err.statusText;\n        //console.error(err);\n\n\n        return throwError(err);\n      }));\n    }\n\n  }\n\n  ErrorInterceptor.ɵfac = function ErrorInterceptor_Factory(t) {\n    return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n\n  ErrorInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorInterceptor,\n    factory: ErrorInterceptor.ɵfac\n  });\n  return ErrorInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}