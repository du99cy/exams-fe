{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, Input, EventEmitter, forwardRef, ChangeDetectionStrategy, Output, NgModule } from '@angular/core';\nimport * as i1 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i2 from '@angular/material/core';\nimport { MatRippleModule } from '@angular/material/core';\nimport { FormControl, Validators, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i1$1 from '@angular/material/progress-bar';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { animation, style, animate, keyframes, trigger, transition, query, stagger, animateChild, useAnimation } from '@angular/animations';\nimport * as i1$2 from '@angular/material/card';\nimport { MatCardModule } from '@angular/material/card';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nfunction MatPasswordStrengthInfoComponent_div_2_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\");\n  }\n\n  if (rf & 2) {\n    i0.ɵɵproperty(\"@flipY\", undefined);\n  }\n}\n\nfunction MatPasswordStrengthInfoComponent_div_2_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@positiveState\", undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r9.matIconDone);\n  }\n}\n\nfunction MatPasswordStrengthInfoComponent_div_2_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 6);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r11 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@negativeState\", undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r11.matIconError);\n  }\n}\n\nfunction MatPasswordStrengthInfoComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵtemplate(1, MatPasswordStrengthInfoComponent_div_2_div_1_Template, 1, 1, \"div\", 2);\n    i0.ɵɵtemplate(2, MatPasswordStrengthInfoComponent_div_2_ng_template_2_Template, 2, 2, \"ng-template\", null, 3, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵtemplate(4, MatPasswordStrengthInfoComponent_div_2_ng_template_4_Template, 2, 2, \"ng-template\", null, 4, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementStart(6, \"span\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const _r8 = i0.ɵɵreference(3);\n\n    const _r10 = i0.ɵɵreference(5);\n\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"@items\", undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.passwordComponent.containAtLeastOneLowerCaseLetter)(\"ngIfThen\", _r8)(\"ngIfElse\", _r10);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(ctx_r0.lowerCaseCriteriaMsg);\n  }\n}\n\nfunction MatPasswordStrengthInfoComponent_div_3_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\");\n  }\n}\n\nfunction MatPasswordStrengthInfoComponent_div_3_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r14 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@positiveState\", undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r14.matIconDone);\n  }\n}\n\nfunction MatPasswordStrengthInfoComponent_div_3_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 6);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r16 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@negativeState\", undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r16.matIconError);\n  }\n}\n\nfunction MatPasswordStrengthInfoComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵtemplate(1, MatPasswordStrengthInfoComponent_div_3_div_1_Template, 1, 0, \"div\", 2);\n    i0.ɵɵtemplate(2, MatPasswordStrengthInfoComponent_div_3_ng_template_2_Template, 2, 2, \"ng-template\", null, 3, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵtemplate(4, MatPasswordStrengthInfoComponent_div_3_ng_template_4_Template, 2, 2, \"ng-template\", null, 4, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementStart(6, \"span\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const _r13 = i0.ɵɵreference(3);\n\n    const _r15 = i0.ɵɵreference(5);\n\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"@items\", undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.passwordComponent.containAtLeastOneUpperCaseLetter)(\"ngIfThen\", _r13)(\"ngIfElse\", _r15);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(ctx_r1.upperCaseCriteriaMsg);\n  }\n}\n\nfunction MatPasswordStrengthInfoComponent_div_4_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\");\n  }\n}\n\nfunction MatPasswordStrengthInfoComponent_div_4_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r19 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@positiveState\", undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r19.matIconDone);\n  }\n}\n\nfunction MatPasswordStrengthInfoComponent_div_4_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 6);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r21 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@negativeState\", undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r21.matIconError);\n  }\n}\n\nfunction MatPasswordStrengthInfoComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵtemplate(1, MatPasswordStrengthInfoComponent_div_4_div_1_Template, 1, 0, \"div\", 2);\n    i0.ɵɵtemplate(2, MatPasswordStrengthInfoComponent_div_4_ng_template_2_Template, 2, 2, \"ng-template\", null, 3, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵtemplate(4, MatPasswordStrengthInfoComponent_div_4_ng_template_4_Template, 2, 2, \"ng-template\", null, 4, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementStart(6, \"span\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const _r18 = i0.ɵɵreference(3);\n\n    const _r20 = i0.ɵɵreference(5);\n\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"@items\", undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.passwordComponent.containAtLeastOneDigit)(\"ngIfThen\", _r18)(\"ngIfElse\", _r20);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(ctx_r2.digitsCriteriaMsg);\n  }\n}\n\nfunction MatPasswordStrengthInfoComponent_div_5_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\");\n  }\n}\n\nfunction MatPasswordStrengthInfoComponent_div_5_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r24 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@positiveState\", undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r24.matIconDone);\n  }\n}\n\nfunction MatPasswordStrengthInfoComponent_div_5_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 6);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r26 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@negativeState\", undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r26.matIconError);\n  }\n}\n\nfunction MatPasswordStrengthInfoComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵtemplate(1, MatPasswordStrengthInfoComponent_div_5_div_1_Template, 1, 0, \"div\", 2);\n    i0.ɵɵtemplate(2, MatPasswordStrengthInfoComponent_div_5_ng_template_2_Template, 2, 2, \"ng-template\", null, 3, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵtemplate(4, MatPasswordStrengthInfoComponent_div_5_ng_template_4_Template, 2, 2, \"ng-template\", null, 4, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementStart(6, \"span\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const _r23 = i0.ɵɵreference(3);\n\n    const _r25 = i0.ɵɵreference(5);\n\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"@items\", undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.passwordComponent.containAtLeastOneSpecialChar)(\"ngIfThen\", _r23)(\"ngIfElse\", _r25);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(ctx_r3.specialCharsCriteriaMsg);\n  }\n}\n\nfunction MatPasswordStrengthInfoComponent_div_6_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\");\n  }\n}\n\nfunction MatPasswordStrengthInfoComponent_div_6_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r29 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@positiveState\", undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r29.matIconDone);\n  }\n}\n\nfunction MatPasswordStrengthInfoComponent_div_6_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 6);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r31 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@negativeState\", undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r31.matIconError);\n  }\n}\n\nfunction MatPasswordStrengthInfoComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵtemplate(1, MatPasswordStrengthInfoComponent_div_6_div_1_Template, 1, 0, \"div\", 2);\n    i0.ɵɵtemplate(2, MatPasswordStrengthInfoComponent_div_6_ng_template_2_Template, 2, 2, \"ng-template\", null, 3, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵtemplate(4, MatPasswordStrengthInfoComponent_div_6_ng_template_4_Template, 2, 2, \"ng-template\", null, 4, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementStart(6, \"span\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const _r28 = i0.ɵɵreference(3);\n\n    const _r30 = i0.ɵɵreference(5);\n\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"@items\", undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.passwordComponent.containAtLeastMinChars)(\"ngIfThen\", _r28)(\"ngIfElse\", _r30);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(ctx_r4.minCharsCriteriaMsg);\n  }\n}\n\nfunction MatPasswordStrengthInfoComponent_div_7_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\");\n  }\n}\n\nfunction MatPasswordStrengthInfoComponent_div_7_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r34 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@positiveState\", undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r34.matIconDone);\n  }\n}\n\nfunction MatPasswordStrengthInfoComponent_div_7_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 6);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r36 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@negativeState\", undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r36.matIconError);\n  }\n}\n\nfunction MatPasswordStrengthInfoComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵtemplate(1, MatPasswordStrengthInfoComponent_div_7_div_1_Template, 1, 0, \"div\", 2);\n    i0.ɵɵtemplate(2, MatPasswordStrengthInfoComponent_div_7_ng_template_2_Template, 2, 2, \"ng-template\", null, 3, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵtemplate(4, MatPasswordStrengthInfoComponent_div_7_ng_template_4_Template, 2, 2, \"ng-template\", null, 4, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementStart(6, \"span\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const _r33 = i0.ɵɵreference(3);\n\n    const _r35 = i0.ɵɵreference(5);\n\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"@items\", undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.passwordComponent.containAtCustomChars)(\"ngIfThen\", _r33)(\"ngIfElse\", _r35);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(ctx_r5.customCharsCriteriaMsg);\n  }\n}\n\nfunction MatPasswordStrengthInfoComponent_div_8_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\");\n  }\n}\n\nfunction MatPasswordStrengthInfoComponent_div_8_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r39 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@positiveState\", undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r39.matIconDone);\n  }\n}\n\nfunction MatPasswordStrengthInfoComponent_div_8_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 6);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r41 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@negativeState\", undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r41.matIconError);\n  }\n}\n\nfunction MatPasswordStrengthInfoComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵtemplate(1, MatPasswordStrengthInfoComponent_div_8_div_1_Template, 1, 0, \"div\", 2);\n    i0.ɵɵtemplate(2, MatPasswordStrengthInfoComponent_div_8_ng_template_2_Template, 2, 2, \"ng-template\", null, 3, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵtemplate(4, MatPasswordStrengthInfoComponent_div_8_ng_template_4_Template, 2, 2, \"ng-template\", null, 4, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementStart(6, \"span\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const _r38 = i0.ɵɵreference(3);\n\n    const _r40 = i0.ɵɵreference(5);\n\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"@items\", undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r6.passwordComponent.strength === 100)(\"ngIfThen\", _r38)(\"ngIfElse\", _r40);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate1(\"Password's strength = \", ctx_r6.passwordComponent.strength, \" %100\");\n  }\n}\n\nvar Colors;\n\n(function (Colors) {\n  Colors[\"primary\"] = \"primary\";\n  Colors[\"accent\"] = \"accent\";\n  Colors[\"warn\"] = \"warn\";\n})(Colors || (Colors = {}));\n\nvar Criteria;\n\n(function (Criteria) {\n  Criteria[\"at_least_eight_chars\"] = \"minChar\";\n  Criteria[\"at_least_one_lower_case_char\"] = \"lowerCase\";\n  Criteria[\"at_least_one_upper_case_char\"] = \"upperCase\";\n  Criteria[\"at_least_one_digit_char\"] = \"digit\";\n  Criteria[\"at_least_one_special_char\"] = \" specialChar\";\n  Criteria[\"at_custom_chars\"] = \"customChars\";\n})(Criteria || (Criteria = {}));\n\nclass MatPassToggleVisibilityComponent {\n  get type() {\n    return this.isVisible ? 'text' : 'password';\n  }\n\n}\n\nMatPassToggleVisibilityComponent.ɵfac = function MatPassToggleVisibilityComponent_Factory(t) {\n  return new (t || MatPassToggleVisibilityComponent)();\n};\n\nMatPassToggleVisibilityComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatPassToggleVisibilityComponent,\n  selectors: [[\"mat-pass-toggle-visibility\"]],\n  inputs: {\n    isVisible: \"isVisible\",\n    tabindex: \"tabindex\"\n  },\n  decls: 3,\n  vars: 2,\n  consts: [[\"mat-icon-button\", \"\", \"matRipple\", \"\", \"matRippleCentered\", \"true\", \"matRipple\", \"\", \"type\", \"button\", 1, \"mat-icon-button\", \"cdk-focused\", \"cdk-mouse-focused\", 3, \"click\"]],\n  template: function MatPassToggleVisibilityComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"button\", 0);\n      i0.ɵɵlistener(\"click\", function MatPassToggleVisibilityComponent_Template_button_click_0_listener() {\n        return ctx.isVisible = !ctx.isVisible;\n      });\n      i0.ɵɵelementStart(1, \"mat-icon\");\n      i0.ɵɵtext(2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"tabindex\", ctx.tabindex ? ctx.tabindex : null);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(ctx.isVisible ? \"visibility\" : \"visibility_off\");\n    }\n  },\n  directives: [i1.MatIcon, i2.MatRipple],\n  styles: [\"\"],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatPassToggleVisibilityComponent, [{\n    type: Component,\n    args: [{\n      selector: 'mat-pass-toggle-visibility',\n      encapsulation: ViewEncapsulation.None,\n      template: \"<button\\n  (click)=\\\"isVisible = !isVisible\\\"\\n  class=\\\"mat-icon-button cdk-focused cdk-mouse-focused\\\"\\n  mat-icon-button\\n  matRipple\\n  matRippleCentered=\\\"true\\\"\\n  matRipple\\n  [attr.tabindex]=\\\"tabindex ? tabindex : null\\\"\\n  type=\\\"button\\\"\\n>\\n  <mat-icon>{{ isVisible ? \\\"visibility\\\" : \\\"visibility_off\\\" }}</mat-icon>\\n</button>\\n\",\n      styles: [\"\"]\n    }]\n  }], null, {\n    isVisible: [{\n      type: Input\n    }],\n    tabindex: [{\n      type: Input\n    }]\n  });\n})();\n\nclass MatPasswordStrengthValidator {\n  isUndefinedOrEmpty(control) {\n    if (!control || !control.value || control.value.length === 0) {\n      return undefined;\n    }\n  }\n\n  validate(criteria, regex) {\n    const validator = control => {\n      this.isUndefinedOrEmpty(control);\n\n      if (!regex.test(control.value)) {\n        const failed = {};\n        failed[criteria] = {\n          actualValue: control.value,\n          requiredPattern: regex\n        };\n        return failed;\n      }\n\n      return undefined;\n    };\n\n    return validator;\n  }\n\n  confirm(password) {\n    const validator = control => {\n      this.isUndefinedOrEmpty(control);\n\n      if (control.value !== password) {\n        return {\n          notConfirmed: {\n            password: password,\n            passwordConfirmation: control.value\n          }\n        };\n      }\n\n      return undefined;\n    };\n\n    return validator;\n  }\n\n}\n\nconst RegExpValidator = {\n  'lowerCase': RegExp(/^(?=.*?[a-z])/),\n  'upperCase': RegExp(/^(?=.*?[A-Z])/),\n  'digit': RegExp(/^(?=.*?[0-9])/),\n  'specialChar': RegExp(/^(?=.*?[\" !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\"])/)\n};\n\nclass MatPasswordStrengthComponent {\n  constructor() {\n    this.enableLengthRule = true;\n    this.enableLowerCaseLetterRule = true;\n    this.enableUpperCaseLetterRule = true;\n    this.enableDigitRule = true;\n    this.enableSpecialCharRule = true;\n    this.min = 8;\n    this.max = 30;\n    this.warnThreshold = 21;\n    this.accentThreshold = 81;\n    this.onStrengthChanged = new EventEmitter();\n    this.criteriaMap = new Map(); // TO ACCESS VIA CONTENT CHILD\n\n    this.passwordFormControl = new FormControl();\n    this.passwordConfirmationFormControl = new FormControl();\n    this.validatorsArray = [];\n    this.matPasswordStrengthValidator = new MatPasswordStrengthValidator();\n    this._strength = 0;\n\n    this.propagateChange = _ => {};\n  }\n\n  get strength() {\n    return this._strength ? this._strength : 0;\n  }\n\n  get color() {\n    if (this._strength < this.warnThreshold) {\n      return Colors.warn;\n    } else if (this._strength < this.accentThreshold) {\n      return Colors.accent;\n    } else {\n      return Colors.primary;\n    }\n  }\n\n  ngOnInit() {\n    this.setRulesAndValidators();\n  }\n\n  ngOnChanges(changes) {\n    if (changes.externalError && changes.externalError.firstChange || changes.password.isFirstChange()) {\n      return;\n    } else if (changes.externalError && changes.externalError.currentValue) {\n      this._color = Colors.warn;\n      return;\n    } else if (changes.password.previousValue === changes.password.currentValue && !changes.password.firstChange) {\n      this.calculatePasswordStrength();\n    } else {\n      this.password && this.password.length > 0 ? this.calculatePasswordStrength() : this.reset();\n    }\n  }\n\n  parseCustomValidatorsRegex(value = this.customValidator) {\n    if (this.customValidator instanceof RegExp) {\n      return this.customValidator;\n    } else if (typeof this.customValidator === 'string') {\n      return RegExp(this.customValidator);\n    }\n  }\n\n  setRulesAndValidators() {\n    this.validatorsArray = [];\n    this.criteriaMap = new Map();\n    this.passwordConfirmationFormControl.setValidators(Validators.compose([Validators.required, this.matPasswordStrengthValidator.confirm(this.password)]));\n    this.validatorsArray.push(Validators.required);\n\n    if (this.enableLengthRule) {\n      this.criteriaMap.set(Criteria.at_least_eight_chars, RegExp(`^.{${this.min},${this.max}}$`));\n      this.validatorsArray.push(Validators.minLength(this.min));\n      this.validatorsArray.push(Validators.maxLength(this.max));\n    }\n\n    if (this.enableLowerCaseLetterRule) {\n      this.criteriaMap.set(Criteria.at_least_one_lower_case_char, RegExpValidator.lowerCase);\n      this.validatorsArray.push(Validators.pattern(RegExpValidator.lowerCase));\n    }\n\n    if (this.enableUpperCaseLetterRule) {\n      this.criteriaMap.set(Criteria.at_least_one_upper_case_char, RegExpValidator.upperCase);\n      this.validatorsArray.push(Validators.pattern(RegExpValidator.upperCase));\n    }\n\n    if (this.enableDigitRule) {\n      this.criteriaMap.set(Criteria.at_least_one_digit_char, RegExpValidator.digit);\n      this.validatorsArray.push(Validators.pattern(RegExpValidator.digit));\n    }\n\n    if (this.enableSpecialCharRule) {\n      this.criteriaMap.set(Criteria.at_least_one_special_char, RegExpValidator.specialChar);\n      this.validatorsArray.push(Validators.pattern(RegExpValidator.specialChar));\n    }\n\n    if (this.customValidator) {\n      this.criteriaMap.set(Criteria.at_custom_chars, this.parseCustomValidatorsRegex());\n      this.validatorsArray.push(Validators.pattern(this.parseCustomValidatorsRegex()));\n    }\n\n    this.criteriaMap.forEach((value, key) => {\n      this.validatorsArray.push(this.matPasswordStrengthValidator.validate(key, value));\n    });\n    this.passwordFormControl.setValidators(Validators.compose([...this.validatorsArray]));\n    this.Validators = Validators.compose([...this.validatorsArray]);\n  }\n\n  calculatePasswordStrength() {\n    const requirements = [];\n    const unit = 100 / this.criteriaMap.size; // console.log('this.criteriaMap.size = ', this.criteriaMap.size);\n    // console.log('unit = ', unit);\n\n    requirements.push(this.enableLengthRule ? this._containAtLeastMinChars() : false, this.enableLowerCaseLetterRule ? this._containAtLeastOneLowerCaseLetter() : false, this.enableUpperCaseLetterRule ? this._containAtLeastOneUpperCaseLetter() : false, this.enableDigitRule ? this._containAtLeastOneDigit() : false, this.enableSpecialCharRule ? this._containAtLeastOneSpecialChar() : false, this.customValidator ? this._containCustomChars() : false);\n    this._strength = requirements.filter(v => v).length * unit;\n    this.propagateChange(this.strength); // console.log('length = ', this._strength / unit);\n\n    this.onStrengthChanged.emit(this.strength);\n    this.setRulesAndValidators();\n  }\n\n  reset() {\n    this._strength = 0;\n    this.containAtLeastMinChars = this.containAtLeastOneLowerCaseLetter = this.containAtLeastOneUpperCaseLetter = this.containAtLeastOneDigit = this.containAtCustomChars = this.containAtLeastOneSpecialChar = false;\n  }\n\n  writeValue(obj) {\n    if (obj) {\n      this._strength = obj;\n    }\n  }\n\n  registerOnChange(fn) {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn) {// throw new Error(\"Method not implemented.\");\n  }\n\n  setDisabledState(isDisabled) {// throw new Error(\"Method not implemented.\");\n  }\n\n  _containAtLeastMinChars() {\n    this.containAtLeastMinChars = this.password.length >= this.min;\n    return this.containAtLeastMinChars;\n  }\n\n  _containAtLeastOneLowerCaseLetter() {\n    this.containAtLeastOneLowerCaseLetter = this.criteriaMap.get(Criteria.at_least_one_lower_case_char).test(this.password);\n    return this.containAtLeastOneLowerCaseLetter;\n  }\n\n  _containAtLeastOneUpperCaseLetter() {\n    this.containAtLeastOneUpperCaseLetter = this.criteriaMap.get(Criteria.at_least_one_upper_case_char).test(this.password);\n    return this.containAtLeastOneUpperCaseLetter;\n  }\n\n  _containAtLeastOneDigit() {\n    this.containAtLeastOneDigit = this.criteriaMap.get(Criteria.at_least_one_digit_char).test(this.password);\n    return this.containAtLeastOneDigit;\n  }\n\n  _containAtLeastOneSpecialChar() {\n    this.containAtLeastOneSpecialChar = this.criteriaMap.get(Criteria.at_least_one_special_char).test(this.password);\n    return this.containAtLeastOneSpecialChar;\n  }\n\n  _containCustomChars() {\n    this.containAtCustomChars = this.criteriaMap.get(Criteria.at_custom_chars).test(this.password);\n    return this.containAtCustomChars;\n  }\n\n  ngAfterContentChecked() {\n    if (this.password) {\n      this.calculatePasswordStrength();\n    }\n  }\n\n}\n\nMatPasswordStrengthComponent.ɵfac = function MatPasswordStrengthComponent_Factory(t) {\n  return new (t || MatPasswordStrengthComponent)();\n};\n\nMatPasswordStrengthComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatPasswordStrengthComponent,\n  selectors: [[\"mat-password-strength\"]],\n  inputs: {\n    password: \"password\",\n    externalError: \"externalError\",\n    enableLengthRule: \"enableLengthRule\",\n    enableLowerCaseLetterRule: \"enableLowerCaseLetterRule\",\n    enableUpperCaseLetterRule: \"enableUpperCaseLetterRule\",\n    enableDigitRule: \"enableDigitRule\",\n    enableSpecialCharRule: \"enableSpecialCharRule\",\n    min: \"min\",\n    max: \"max\",\n    customValidator: \"customValidator\",\n    warnThreshold: \"warnThreshold\",\n    accentThreshold: \"accentThreshold\"\n  },\n  outputs: {\n    onStrengthChanged: \"onStrengthChanged\"\n  },\n  exportAs: [\"matPasswordStrength\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatPasswordStrengthComponent),\n    multi: true\n  }]), i0.ɵɵNgOnChangesFeature],\n  decls: 1,\n  vars: 2,\n  consts: [[\"mode\", \"determinate\", 3, \"color\", \"value\"]],\n  template: function MatPasswordStrengthComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"mat-progress-bar\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"color\", ctx.color)(\"value\", ctx.strength);\n    }\n  },\n  directives: [i1$1.MatProgressBar],\n  styles: [\".green   [_nghost-%COMP%]  .mat-progress-bar.mat-primary .mat-progress-bar-fill:after{background-color:#43a047}\"],\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatPasswordStrengthComponent, [{\n    type: Component,\n    args: [{\n      selector: 'mat-password-strength',\n      exportAs: 'matPasswordStrength',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => MatPasswordStrengthComponent),\n        multi: true\n      }],\n      template: \"<mat-progress-bar [color]=\\\"color\\\"\\n                  [value]=\\\"strength\\\"\\n                  mode=\\\"determinate\\\">\\n</mat-progress-bar>\\n\",\n      styles: [\".green :host::ng-deep .mat-progress-bar.mat-primary .mat-progress-bar-fill:after{background-color:#43a047}\\n\"]\n    }]\n  }], null, {\n    password: [{\n      type: Input\n    }],\n    externalError: [{\n      type: Input\n    }],\n    enableLengthRule: [{\n      type: Input\n    }],\n    enableLowerCaseLetterRule: [{\n      type: Input\n    }],\n    enableUpperCaseLetterRule: [{\n      type: Input\n    }],\n    enableDigitRule: [{\n      type: Input\n    }],\n    enableSpecialCharRule: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    customValidator: [{\n      type: Input\n    }],\n    warnThreshold: [{\n      type: Input\n    }],\n    accentThreshold: [{\n      type: Input\n    }],\n    onStrengthChanged: [{\n      type: Output\n    }]\n  });\n})();\n\nfunction flipIn(timing, rotateX, rotateY) {\n  const params = {\n    timing: timing,\n    delay: 0,\n    rotateX,\n    rotateY\n  };\n  return animation([style({\n    'backface-visibility': 'visible'\n  }), animate('{{ timing }}s {{ delay }}s ease-in', keyframes([style({\n    opacity: 0,\n    transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 90deg)',\n    offset: 0\n  }), style({\n    opacity: 1,\n    transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -20deg)',\n    offset: 0.4\n  }), style({\n    transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 10deg)',\n    offset: 0.6\n  }), style({\n    transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -5deg)',\n    offset: 0.8\n  }), style({\n    transform: 'perspective(400px) rotate3d(0, 0, 0, 0)',\n    offset: 1\n  })]))], {\n    params\n  });\n}\n\nconst flipInX = flipIn(1, 1, 0);\nconst flipInY = flipIn(1, 0, 1);\nconst shake = animation(animate('{{ timing }}s {{ delay }}s', keyframes([style({\n  transform: 'translate3d(0, 0, 0)',\n  offset: 0\n}), style({\n  transform: 'translate3d(-10px, 0, 0)',\n  offset: 0.1\n}), style({\n  transform: 'translate3d(10px, 0, 0)',\n  offset: 0.2\n}), style({\n  transform: 'translate3d(-10px, 0, 0)',\n  offset: 0.3\n}), style({\n  transform: 'translate3d(10px, 0, 0)',\n  offset: 0.4\n}), style({\n  transform: 'translate3d(-10px, 0, 0)',\n  offset: 0.5\n}), style({\n  transform: 'translate3d(10px, 0, 0)',\n  offset: 0.6\n}), style({\n  transform: 'translate3d(-10px, 0, 0)',\n  offset: 0.7\n}), style({\n  transform: 'translate3d(10px, 0, 0)',\n  offset: 0.8\n}), style({\n  transform: 'translate3d(-10px, 0, 0)',\n  offset: 0.9\n}), style({\n  transform: 'translate3d(0, 0, 0)',\n  offset: 1\n})])), {\n  params: {\n    timing: 1,\n    delay: 0\n  }\n});\n\nclass MatPasswordStrengthInfoComponent {\n  constructor() {\n    this.enableScoreInfo = false;\n    this.lowerCaseCriteriaMsg = 'contains at least one lower character';\n    this.upperCaseCriteriaMsg = 'contains at least one upper character';\n    this.digitsCriteriaMsg = 'contains at least one digit character';\n    this.specialCharsCriteriaMsg = 'contains at least one special character';\n    this.customCharsCriteriaMsg = 'contains at least one custom character';\n    this.matIconDone = 'done';\n    this.matIconError = 'error';\n  }\n\n  ngOnInit() {\n    if (!this.minCharsCriteriaMsg) {\n      this.minCharsCriteriaMsg = `contains at least ${this.passwordComponent.min} characters`;\n    }\n  }\n\n}\n\nMatPasswordStrengthInfoComponent.ɵfac = function MatPasswordStrengthInfoComponent_Factory(t) {\n  return new (t || MatPasswordStrengthInfoComponent)();\n};\n\nMatPasswordStrengthInfoComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatPasswordStrengthInfoComponent,\n  selectors: [[\"mat-password-strength-info\"]],\n  inputs: {\n    passwordComponent: \"passwordComponent\",\n    enableScoreInfo: \"enableScoreInfo\",\n    lowerCaseCriteriaMsg: \"lowerCaseCriteriaMsg\",\n    upperCaseCriteriaMsg: \"upperCaseCriteriaMsg\",\n    digitsCriteriaMsg: \"digitsCriteriaMsg\",\n    specialCharsCriteriaMsg: \"specialCharsCriteriaMsg\",\n    customCharsCriteriaMsg: \"customCharsCriteriaMsg\",\n    minCharsCriteriaMsg: \"minCharsCriteriaMsg\",\n    matIconDone: \"matIconDone\",\n    matIconError: \"matIconError\"\n  },\n  exportAs: [\"matPasswordStrengthInfo\"],\n  decls: 9,\n  vars: 8,\n  consts: [[\"class\", \"info-row\", 4, \"ngIf\"], [1, \"info-row\"], [4, \"ngIf\", \"ngIfThen\", \"ngIfElse\"], [\"done\", \"\"], [\"error\", \"\"], [\"color\", \"primary\"], [\"color\", \"warn\"]],\n  template: function MatPasswordStrengthInfoComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"mat-card\");\n      i0.ɵɵelementStart(1, \"mat-card-content\");\n      i0.ɵɵtemplate(2, MatPasswordStrengthInfoComponent_div_2_Template, 8, 5, \"div\", 0);\n      i0.ɵɵtemplate(3, MatPasswordStrengthInfoComponent_div_3_Template, 8, 5, \"div\", 0);\n      i0.ɵɵtemplate(4, MatPasswordStrengthInfoComponent_div_4_Template, 8, 5, \"div\", 0);\n      i0.ɵɵtemplate(5, MatPasswordStrengthInfoComponent_div_5_Template, 8, 5, \"div\", 0);\n      i0.ɵɵtemplate(6, MatPasswordStrengthInfoComponent_div_6_Template, 8, 5, \"div\", 0);\n      i0.ɵɵtemplate(7, MatPasswordStrengthInfoComponent_div_7_Template, 8, 5, \"div\", 0);\n      i0.ɵɵtemplate(8, MatPasswordStrengthInfoComponent_div_8_Template, 8, 5, \"div\", 0);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"@list\", undefined);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.passwordComponent.enableLowerCaseLetterRule);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.passwordComponent.enableUpperCaseLetterRule);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.passwordComponent.enableDigitRule);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.passwordComponent.enableSpecialCharRule);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.passwordComponent.enableLengthRule);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.passwordComponent.customValidator);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.enableScoreInfo);\n    }\n  },\n  directives: [i1$2.MatCard, i1.MatIcon, i1$2.MatCardContent, i3.NgIf],\n  styles: [\"mat-card[_ngcontent-%COMP%]{flex-direction:row;box-sizing:border-box;display:flex;place-content:stretch center;align-items:stretch;flex:1 1 0}mat-card[_ngcontent-%COMP%]   mat-card-content[_ngcontent-%COMP%]{flex-direction:column;box-sizing:border-box;display:flex;max-width:100%;place-content:stretch flex-start;align-items:stretch}mat-card[_ngcontent-%COMP%]   mat-card-content[_ngcontent-%COMP%]   mat-icon[_ngcontent-%COMP%]{margin-right:10px}mat-card[_ngcontent-%COMP%]   mat-card-content[_ngcontent-%COMP%]   .info-row[_ngcontent-%COMP%]{flex-direction:row;box-sizing:border-box;display:flex;align-items:center}\"],\n  data: {\n    animation: [// nice stagger effect when showing existing elements\n    trigger('list', [transition(':enter', [// child animation selector + stagger\n    query('@items', stagger(300, animateChild()))])]), trigger('items', [// cubic-bezier for a tiny bouncing feel\n    transition(':enter', [style({\n      transform: 'scale(0.5)',\n      opacity: 0\n    }), animate('1s cubic-bezier(.8,-0.6,0.2,1.5)', style({\n      transform: 'scale(1)',\n      opacity: 1\n    }))]), transition(':leave', [style({\n      transform: 'scale(1)',\n      opacity: 1,\n      height: '*'\n    }), animate('1s cubic-bezier(.8,-0.6,0.2,1.5)', style({\n      transform: 'scale(0.5)',\n      opacity: 0,\n      height: '0px',\n      margin: '0px'\n    }))])]), trigger('positiveState', [transition(':enter', [style({\n      'backface-visibility': 'visible'\n    }), animate('{{ timing }}s {{ delay }}s ease-in', keyframes([style({\n      opacity: 0,\n      transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 90deg)',\n      offset: 0\n    }), style({\n      opacity: 1,\n      transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -20deg)',\n      offset: 0.4\n    }), style({\n      transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 10deg)',\n      offset: 0.6\n    }), style({\n      transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -5deg)',\n      offset: 0.8\n    }), style({\n      transform: 'perspective(400px) rotate3d(0, 0, 0, 0)',\n      offset: 1\n    })]))], {\n      params: {\n        timing: 1,\n        delay: 0,\n        rotateX: 1,\n        rotateY: 0\n      }\n    })]), trigger('negativeState', [transition(':enter', useAnimation(shake))])]\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatPasswordStrengthInfoComponent, [{\n    type: Component,\n    args: [{\n      selector: 'mat-password-strength-info',\n      exportAs: 'matPasswordStrengthInfo',\n      animations: [// nice stagger effect when showing existing elements\n      trigger('list', [transition(':enter', [// child animation selector + stagger\n      query('@items', stagger(300, animateChild()))])]), trigger('items', [// cubic-bezier for a tiny bouncing feel\n      transition(':enter', [style({\n        transform: 'scale(0.5)',\n        opacity: 0\n      }), animate('1s cubic-bezier(.8,-0.6,0.2,1.5)', style({\n        transform: 'scale(1)',\n        opacity: 1\n      }))]), transition(':leave', [style({\n        transform: 'scale(1)',\n        opacity: 1,\n        height: '*'\n      }), animate('1s cubic-bezier(.8,-0.6,0.2,1.5)', style({\n        transform: 'scale(0.5)',\n        opacity: 0,\n        height: '0px',\n        margin: '0px'\n      }))])]), trigger('positiveState', [transition(':enter', [style({\n        'backface-visibility': 'visible'\n      }), animate('{{ timing }}s {{ delay }}s ease-in', keyframes([style({\n        opacity: 0,\n        transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 90deg)',\n        offset: 0\n      }), style({\n        opacity: 1,\n        transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -20deg)',\n        offset: 0.4\n      }), style({\n        transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 10deg)',\n        offset: 0.6\n      }), style({\n        transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -5deg)',\n        offset: 0.8\n      }), style({\n        transform: 'perspective(400px) rotate3d(0, 0, 0, 0)',\n        offset: 1\n      })]))], {\n        params: {\n          timing: 1,\n          delay: 0,\n          rotateX: 1,\n          rotateY: 0\n        }\n      })]), trigger('negativeState', [transition(':enter', useAnimation(shake))])],\n      template: \"<mat-card @list>\\n  <mat-card-content>\\n    <div *ngIf=\\\"passwordComponent.enableLowerCaseLetterRule\\\" @items class=\\\"info-row\\\">\\n      <div *ngIf=\\\"passwordComponent.containAtLeastOneLowerCaseLetter; then done else error\\\" @flipY>\\n      </div>\\n      <ng-template #done>\\n        <mat-icon @positiveState color=\\\"primary\\\">{{matIconDone}}</mat-icon>\\n      </ng-template>\\n      <ng-template #error>\\n        <mat-icon @negativeState color=\\\"warn\\\">{{matIconError}}</mat-icon>\\n      </ng-template>\\n      <span>{{lowerCaseCriteriaMsg}}</span>\\n    </div>\\n\\n    <div *ngIf=\\\"passwordComponent.enableUpperCaseLetterRule\\\" @items class=\\\"info-row\\\">\\n      <div *ngIf=\\\"passwordComponent.containAtLeastOneUpperCaseLetter; then done else error\\\">\\n      </div>\\n      <ng-template #done>\\n        <mat-icon @positiveState color=\\\"primary\\\">{{matIconDone}}</mat-icon>\\n      </ng-template>\\n      <ng-template #error>\\n        <mat-icon @negativeState color=\\\"warn\\\">{{matIconError}}</mat-icon>\\n      </ng-template>\\n      <span>{{upperCaseCriteriaMsg}}</span>\\n    </div>\\n\\n    <div *ngIf=\\\"passwordComponent.enableDigitRule\\\" @items class=\\\"info-row\\\">\\n      <div *ngIf=\\\"passwordComponent.containAtLeastOneDigit; then done else error\\\">\\n      </div>\\n      <ng-template #done>\\n        <mat-icon @positiveState color=\\\"primary\\\">{{matIconDone}}</mat-icon>\\n      </ng-template>\\n      <ng-template #error>\\n        <mat-icon @negativeState color=\\\"warn\\\">{{matIconError}}</mat-icon>\\n      </ng-template>\\n      <span>{{digitsCriteriaMsg}}</span>\\n    </div>\\n\\n    <div *ngIf=\\\"passwordComponent.enableSpecialCharRule\\\" @items class=\\\"info-row\\\">\\n      <div *ngIf=\\\"passwordComponent.containAtLeastOneSpecialChar; then done else error\\\">\\n      </div>\\n      <ng-template #done>\\n        <mat-icon @positiveState color=\\\"primary\\\">{{matIconDone}}</mat-icon>\\n      </ng-template>\\n      <ng-template #error>\\n        <mat-icon @negativeState color=\\\"warn\\\">{{matIconError}}</mat-icon>\\n      </ng-template>\\n      <span>{{specialCharsCriteriaMsg}}</span>\\n    </div>\\n\\n    <div *ngIf=\\\"passwordComponent.enableLengthRule\\\" @items class=\\\"info-row\\\">\\n      <div *ngIf=\\\"passwordComponent.containAtLeastMinChars; then done else error\\\">\\n      </div>\\n      <ng-template #done>\\n        <mat-icon @positiveState color=\\\"primary\\\">{{matIconDone}}</mat-icon>\\n      </ng-template>\\n      <ng-template #error>\\n        <mat-icon @negativeState color=\\\"warn\\\">{{matIconError}}</mat-icon>\\n      </ng-template>\\n      <span>{{minCharsCriteriaMsg}}</span>\\n    </div>\\n\\n    <div *ngIf=\\\"passwordComponent.customValidator\\\" @items class=\\\"info-row\\\">\\n      <div *ngIf=\\\"passwordComponent.containAtCustomChars; then done else error\\\">\\n      </div>\\n      <ng-template #done>\\n        <mat-icon @positiveState color=\\\"primary\\\">{{matIconDone}}</mat-icon>\\n      </ng-template>\\n      <ng-template #error>\\n        <mat-icon @negativeState color=\\\"warn\\\">{{matIconError}}</mat-icon>\\n      </ng-template>\\n      <span>{{customCharsCriteriaMsg}}</span>\\n    </div>\\n\\n    <div *ngIf=\\\"enableScoreInfo\\\" @items class=\\\"info-row\\\">\\n      <div *ngIf=\\\"passwordComponent.strength === 100; then done else error\\\">\\n      </div>\\n      <ng-template #done>\\n        <mat-icon @positiveState color=\\\"primary\\\">{{matIconDone}}</mat-icon>\\n      </ng-template>\\n      <ng-template #error>\\n        <mat-icon @negativeState color=\\\"warn\\\">{{matIconError}}</mat-icon>\\n      </ng-template>\\n      <span>Password's strength = {{passwordComponent.strength}} %100</span>\\n    </div>\\n\\n  </mat-card-content>\\n</mat-card>\",\n      styles: [\"mat-card{flex-direction:row;box-sizing:border-box;display:flex;place-content:stretch center;align-items:stretch;flex:1 1 0}mat-card mat-card-content{flex-direction:column;box-sizing:border-box;display:flex;max-width:100%;place-content:stretch flex-start;align-items:stretch}mat-card mat-card-content mat-icon{margin-right:10px}mat-card mat-card-content .info-row{flex-direction:row;box-sizing:border-box;display:flex;align-items:center}\\n\"]\n    }]\n  }], null, {\n    passwordComponent: [{\n      type: Input\n    }],\n    enableScoreInfo: [{\n      type: Input\n    }],\n    lowerCaseCriteriaMsg: [{\n      type: Input\n    }],\n    upperCaseCriteriaMsg: [{\n      type: Input\n    }],\n    digitsCriteriaMsg: [{\n      type: Input\n    }],\n    specialCharsCriteriaMsg: [{\n      type: Input\n    }],\n    customCharsCriteriaMsg: [{\n      type: Input\n    }],\n    minCharsCriteriaMsg: [{\n      type: Input\n    }],\n    matIconDone: [{\n      type: Input\n    }],\n    matIconError: [{\n      type: Input\n    }]\n  });\n})();\n\nclass MatPasswordStrengthModule {\n  static forRoot() {\n    return {\n      ngModule: MatPasswordStrengthModule,\n      providers: []\n    };\n  }\n\n}\n\nMatPasswordStrengthModule.ɵfac = function MatPasswordStrengthModule_Factory(t) {\n  return new (t || MatPasswordStrengthModule)();\n};\n\nMatPasswordStrengthModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatPasswordStrengthModule\n});\nMatPasswordStrengthModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, MatProgressBarModule, MatCardModule, MatIconModule, MatRippleModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatPasswordStrengthModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, MatProgressBarModule, MatCardModule, MatIconModule, MatRippleModule],\n      exports: [MatPasswordStrengthComponent, MatPasswordStrengthInfoComponent, MatPassToggleVisibilityComponent],\n      declarations: [MatPasswordStrengthComponent, MatPasswordStrengthInfoComponent, MatPassToggleVisibilityComponent]\n    }]\n  }], null, null);\n})();\n/*\n * Public API Surface of password-strength\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { Colors, Criteria, MatPassToggleVisibilityComponent, MatPasswordStrengthComponent, MatPasswordStrengthInfoComponent, MatPasswordStrengthModule, MatPasswordStrengthValidator, RegExpValidator, flipIn, flipInX, flipInY, shake };","map":{"version":3,"sources":["D:/angular/exams-fe/node_modules/@angular-material-extensions/password-strength/fesm2015/angular-material-extensions-password-strength.mjs"],"names":["i0","Component","ViewEncapsulation","Input","EventEmitter","forwardRef","ChangeDetectionStrategy","Output","NgModule","i1","MatIconModule","i2","MatRippleModule","FormControl","Validators","NG_VALUE_ACCESSOR","i1$1","MatProgressBarModule","animation","style","animate","keyframes","trigger","transition","query","stagger","animateChild","useAnimation","i1$2","MatCardModule","i3","CommonModule","Colors","Criteria","MatPassToggleVisibilityComponent","type","isVisible","ɵfac","ɵcmp","MatIcon","MatRipple","args","selector","encapsulation","None","template","styles","tabindex","MatPasswordStrengthValidator","isUndefinedOrEmpty","control","value","length","undefined","validate","criteria","regex","validator","test","failed","actualValue","requiredPattern","confirm","password","notConfirmed","passwordConfirmation","RegExpValidator","RegExp","MatPasswordStrengthComponent","constructor","enableLengthRule","enableLowerCaseLetterRule","enableUpperCaseLetterRule","enableDigitRule","enableSpecialCharRule","min","max","warnThreshold","accentThreshold","onStrengthChanged","criteriaMap","Map","passwordFormControl","passwordConfirmationFormControl","validatorsArray","matPasswordStrengthValidator","_strength","propagateChange","_","strength","color","warn","accent","primary","ngOnInit","setRulesAndValidators","ngOnChanges","changes","externalError","firstChange","isFirstChange","currentValue","_color","previousValue","calculatePasswordStrength","reset","parseCustomValidatorsRegex","customValidator","setValidators","compose","required","push","set","at_least_eight_chars","minLength","maxLength","at_least_one_lower_case_char","lowerCase","pattern","at_least_one_upper_case_char","upperCase","at_least_one_digit_char","digit","at_least_one_special_char","specialChar","at_custom_chars","forEach","key","requirements","unit","size","_containAtLeastMinChars","_containAtLeastOneLowerCaseLetter","_containAtLeastOneUpperCaseLetter","_containAtLeastOneDigit","_containAtLeastOneSpecialChar","_containCustomChars","filter","v","emit","containAtLeastMinChars","containAtLeastOneLowerCaseLetter","containAtLeastOneUpperCaseLetter","containAtLeastOneDigit","containAtCustomChars","containAtLeastOneSpecialChar","writeValue","obj","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","get","ngAfterContentChecked","provide","useExisting","multi","MatProgressBar","exportAs","changeDetection","OnPush","providers","flipIn","timing","rotateX","rotateY","params","delay","opacity","transform","offset","flipInX","flipInY","shake","MatPasswordStrengthInfoComponent","enableScoreInfo","lowerCaseCriteriaMsg","upperCaseCriteriaMsg","digitsCriteriaMsg","specialCharsCriteriaMsg","customCharsCriteriaMsg","matIconDone","matIconError","minCharsCriteriaMsg","passwordComponent","MatCard","MatCardContent","NgIf","height","margin","animations","MatPasswordStrengthModule","forRoot","ngModule","ɵmod","ɵinj","imports","exports","declarations"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, Input, EventEmitter, forwardRef, ChangeDetectionStrategy, Output, NgModule } from '@angular/core';\nimport * as i1 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i2 from '@angular/material/core';\nimport { MatRippleModule } from '@angular/material/core';\nimport { FormControl, Validators, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i1$1 from '@angular/material/progress-bar';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { animation, style, animate, keyframes, trigger, transition, query, stagger, animateChild, useAnimation } from '@angular/animations';\nimport * as i1$2 from '@angular/material/card';\nimport { MatCardModule } from '@angular/material/card';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nvar Colors;\n(function (Colors) {\n    Colors[\"primary\"] = \"primary\";\n    Colors[\"accent\"] = \"accent\";\n    Colors[\"warn\"] = \"warn\";\n})(Colors || (Colors = {}));\n\nvar Criteria;\n(function (Criteria) {\n    Criteria[\"at_least_eight_chars\"] = \"minChar\";\n    Criteria[\"at_least_one_lower_case_char\"] = \"lowerCase\";\n    Criteria[\"at_least_one_upper_case_char\"] = \"upperCase\";\n    Criteria[\"at_least_one_digit_char\"] = \"digit\";\n    Criteria[\"at_least_one_special_char\"] = \" specialChar\";\n    Criteria[\"at_custom_chars\"] = \"customChars\";\n})(Criteria || (Criteria = {}));\n\nclass MatPassToggleVisibilityComponent {\n    get type() {\n        return this.isVisible ? 'text' : 'password';\n    }\n}\nMatPassToggleVisibilityComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: MatPassToggleVisibilityComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nMatPassToggleVisibilityComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.2\", type: MatPassToggleVisibilityComponent, selector: \"mat-pass-toggle-visibility\", inputs: { isVisible: \"isVisible\", tabindex: \"tabindex\" }, ngImport: i0, template: \"<button\\n  (click)=\\\"isVisible = !isVisible\\\"\\n  class=\\\"mat-icon-button cdk-focused cdk-mouse-focused\\\"\\n  mat-icon-button\\n  matRipple\\n  matRippleCentered=\\\"true\\\"\\n  matRipple\\n  [attr.tabindex]=\\\"tabindex ? tabindex : null\\\"\\n  type=\\\"button\\\"\\n>\\n  <mat-icon>{{ isVisible ? \\\"visibility\\\" : \\\"visibility_off\\\" }}</mat-icon>\\n</button>\\n\", styles: [\"\"], components: [{ type: i1.MatIcon, selector: \"mat-icon\", inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"], exportAs: [\"matIcon\"] }], directives: [{ type: i2.MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: MatPassToggleVisibilityComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-pass-toggle-visibility', encapsulation: ViewEncapsulation.None, template: \"<button\\n  (click)=\\\"isVisible = !isVisible\\\"\\n  class=\\\"mat-icon-button cdk-focused cdk-mouse-focused\\\"\\n  mat-icon-button\\n  matRipple\\n  matRippleCentered=\\\"true\\\"\\n  matRipple\\n  [attr.tabindex]=\\\"tabindex ? tabindex : null\\\"\\n  type=\\\"button\\\"\\n>\\n  <mat-icon>{{ isVisible ? \\\"visibility\\\" : \\\"visibility_off\\\" }}</mat-icon>\\n</button>\\n\", styles: [\"\"] }]\n        }], propDecorators: { isVisible: [{\n                type: Input\n            }], tabindex: [{\n                type: Input\n            }] } });\n\nclass MatPasswordStrengthValidator {\n    isUndefinedOrEmpty(control) {\n        if (!control || !control.value || control.value.length === 0) {\n            return undefined;\n        }\n    }\n    validate(criteria, regex) {\n        const validator = (control) => {\n            this.isUndefinedOrEmpty(control);\n            if (!regex.test(control.value)) {\n                const failed = {};\n                failed[criteria] = {\n                    actualValue: control.value,\n                    requiredPattern: regex\n                };\n                return failed;\n            }\n            return undefined;\n        };\n        return validator;\n    }\n    confirm(password) {\n        const validator = (control) => {\n            this.isUndefinedOrEmpty(control);\n            if (control.value !== password) {\n                return {\n                    notConfirmed: {\n                        password: password,\n                        passwordConfirmation: control.value\n                    }\n                };\n            }\n            return undefined;\n        };\n        return validator;\n    }\n}\n\nconst RegExpValidator = {\n    'lowerCase': RegExp(/^(?=.*?[a-z])/),\n    'upperCase': RegExp(/^(?=.*?[A-Z])/),\n    'digit': RegExp(/^(?=.*?[0-9])/),\n    'specialChar': RegExp(/^(?=.*?[\" !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\"])/),\n};\n\nclass MatPasswordStrengthComponent {\n    constructor() {\n        this.enableLengthRule = true;\n        this.enableLowerCaseLetterRule = true;\n        this.enableUpperCaseLetterRule = true;\n        this.enableDigitRule = true;\n        this.enableSpecialCharRule = true;\n        this.min = 8;\n        this.max = 30;\n        this.warnThreshold = 21;\n        this.accentThreshold = 81;\n        this.onStrengthChanged = new EventEmitter();\n        this.criteriaMap = new Map();\n        // TO ACCESS VIA CONTENT CHILD\n        this.passwordFormControl = new FormControl();\n        this.passwordConfirmationFormControl = new FormControl();\n        this.validatorsArray = [];\n        this.matPasswordStrengthValidator = new MatPasswordStrengthValidator();\n        this._strength = 0;\n        this.propagateChange = (_) => {\n        };\n    }\n    get strength() {\n        return this._strength ? this._strength : 0;\n    }\n    get color() {\n        if (this._strength < this.warnThreshold) {\n            return Colors.warn;\n        }\n        else if (this._strength < this.accentThreshold) {\n            return Colors.accent;\n        }\n        else {\n            return Colors.primary;\n        }\n    }\n    ngOnInit() {\n        this.setRulesAndValidators();\n    }\n    ngOnChanges(changes) {\n        if ((changes.externalError && changes.externalError.firstChange) || changes.password.isFirstChange()) {\n            return;\n        }\n        else if (changes.externalError && changes.externalError.currentValue) {\n            this._color = Colors.warn;\n            return;\n        }\n        else if (changes.password.previousValue === changes.password.currentValue && !changes.password.firstChange) {\n            this.calculatePasswordStrength();\n        }\n        else {\n            this.password && this.password.length > 0 ?\n                this.calculatePasswordStrength() : this.reset();\n        }\n    }\n    parseCustomValidatorsRegex(value = this.customValidator) {\n        if (this.customValidator instanceof RegExp) {\n            return this.customValidator;\n        }\n        else if (typeof this.customValidator === 'string') {\n            return RegExp(this.customValidator);\n        }\n    }\n    setRulesAndValidators() {\n        this.validatorsArray = [];\n        this.criteriaMap = new Map();\n        this.passwordConfirmationFormControl\n            .setValidators(Validators.compose([\n            Validators.required, this.matPasswordStrengthValidator.confirm(this.password)\n        ]));\n        this.validatorsArray.push(Validators.required);\n        if (this.enableLengthRule) {\n            this.criteriaMap.set(Criteria.at_least_eight_chars, RegExp(`^.{${this.min},${this.max}}$`));\n            this.validatorsArray.push(Validators.minLength(this.min));\n            this.validatorsArray.push(Validators.maxLength(this.max));\n        }\n        if (this.enableLowerCaseLetterRule) {\n            this.criteriaMap.set(Criteria.at_least_one_lower_case_char, RegExpValidator.lowerCase);\n            this.validatorsArray.push(Validators.pattern(RegExpValidator.lowerCase));\n        }\n        if (this.enableUpperCaseLetterRule) {\n            this.criteriaMap.set(Criteria.at_least_one_upper_case_char, RegExpValidator.upperCase);\n            this.validatorsArray.push(Validators.pattern(RegExpValidator.upperCase));\n        }\n        if (this.enableDigitRule) {\n            this.criteriaMap.set(Criteria.at_least_one_digit_char, RegExpValidator.digit);\n            this.validatorsArray.push(Validators.pattern(RegExpValidator.digit));\n        }\n        if (this.enableSpecialCharRule) {\n            this.criteriaMap.set(Criteria.at_least_one_special_char, RegExpValidator.specialChar);\n            this.validatorsArray.push(Validators.pattern(RegExpValidator.specialChar));\n        }\n        if (this.customValidator) {\n            this.criteriaMap.set(Criteria.at_custom_chars, this.parseCustomValidatorsRegex());\n            this.validatorsArray.push(Validators.pattern(this.parseCustomValidatorsRegex()));\n        }\n        this.criteriaMap.forEach((value, key) => {\n            this.validatorsArray.push(this.matPasswordStrengthValidator.validate(key, value));\n        });\n        this.passwordFormControl.setValidators(Validators.compose([...this.validatorsArray]));\n        this.Validators = Validators.compose([...this.validatorsArray]);\n    }\n    calculatePasswordStrength() {\n        const requirements = [];\n        const unit = 100 / this.criteriaMap.size;\n        // console.log('this.criteriaMap.size = ', this.criteriaMap.size);\n        // console.log('unit = ', unit);\n        requirements.push(this.enableLengthRule ? this._containAtLeastMinChars() : false, this.enableLowerCaseLetterRule ? this._containAtLeastOneLowerCaseLetter() : false, this.enableUpperCaseLetterRule ? this._containAtLeastOneUpperCaseLetter() : false, this.enableDigitRule ? this._containAtLeastOneDigit() : false, this.enableSpecialCharRule ? this._containAtLeastOneSpecialChar() : false, this.customValidator ? this._containCustomChars() : false);\n        this._strength = requirements.filter(v => v).length * unit;\n        this.propagateChange(this.strength);\n        // console.log('length = ', this._strength / unit);\n        this.onStrengthChanged.emit(this.strength);\n        this.setRulesAndValidators();\n    }\n    reset() {\n        this._strength = 0;\n        this.containAtLeastMinChars =\n            this.containAtLeastOneLowerCaseLetter =\n                this.containAtLeastOneUpperCaseLetter =\n                    this.containAtLeastOneDigit =\n                        this.containAtCustomChars =\n                            this.containAtLeastOneSpecialChar = false;\n    }\n    writeValue(obj) {\n        if (obj) {\n            this._strength = obj;\n        }\n    }\n    registerOnChange(fn) {\n        this.propagateChange = fn;\n    }\n    registerOnTouched(fn) {\n        // throw new Error(\"Method not implemented.\");\n    }\n    setDisabledState(isDisabled) {\n        // throw new Error(\"Method not implemented.\");\n    }\n    _containAtLeastMinChars() {\n        this.containAtLeastMinChars = this.password.length >= this.min;\n        return this.containAtLeastMinChars;\n    }\n    _containAtLeastOneLowerCaseLetter() {\n        this.containAtLeastOneLowerCaseLetter =\n            this.criteriaMap\n                .get(Criteria.at_least_one_lower_case_char)\n                .test(this.password);\n        return this.containAtLeastOneLowerCaseLetter;\n    }\n    _containAtLeastOneUpperCaseLetter() {\n        this.containAtLeastOneUpperCaseLetter =\n            this.criteriaMap\n                .get(Criteria.at_least_one_upper_case_char)\n                .test(this.password);\n        return this.containAtLeastOneUpperCaseLetter;\n    }\n    _containAtLeastOneDigit() {\n        this.containAtLeastOneDigit =\n            this.criteriaMap\n                .get(Criteria.at_least_one_digit_char)\n                .test(this.password);\n        return this.containAtLeastOneDigit;\n    }\n    _containAtLeastOneSpecialChar() {\n        this.containAtLeastOneSpecialChar =\n            this.criteriaMap\n                .get(Criteria.at_least_one_special_char)\n                .test(this.password);\n        return this.containAtLeastOneSpecialChar;\n    }\n    _containCustomChars() {\n        this.containAtCustomChars =\n            this.criteriaMap\n                .get(Criteria.at_custom_chars)\n                .test(this.password);\n        return this.containAtCustomChars;\n    }\n    ngAfterContentChecked() {\n        if (this.password) {\n            this.calculatePasswordStrength();\n        }\n    }\n}\nMatPasswordStrengthComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: MatPasswordStrengthComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nMatPasswordStrengthComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.2\", type: MatPasswordStrengthComponent, selector: \"mat-password-strength\", inputs: { password: \"password\", externalError: \"externalError\", enableLengthRule: \"enableLengthRule\", enableLowerCaseLetterRule: \"enableLowerCaseLetterRule\", enableUpperCaseLetterRule: \"enableUpperCaseLetterRule\", enableDigitRule: \"enableDigitRule\", enableSpecialCharRule: \"enableSpecialCharRule\", min: \"min\", max: \"max\", customValidator: \"customValidator\", warnThreshold: \"warnThreshold\", accentThreshold: \"accentThreshold\" }, outputs: { onStrengthChanged: \"onStrengthChanged\" }, providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => MatPasswordStrengthComponent),\n            multi: true\n        }\n    ], exportAs: [\"matPasswordStrength\"], usesOnChanges: true, ngImport: i0, template: \"<mat-progress-bar [color]=\\\"color\\\"\\n                  [value]=\\\"strength\\\"\\n                  mode=\\\"determinate\\\">\\n</mat-progress-bar>\\n\", styles: [\".green :host::ng-deep .mat-progress-bar.mat-primary .mat-progress-bar-fill:after{background-color:#43a047}\\n\"], components: [{ type: i1$1.MatProgressBar, selector: \"mat-progress-bar\", inputs: [\"color\", \"value\", \"bufferValue\", \"mode\"], outputs: [\"animationEnd\"], exportAs: [\"matProgressBar\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: MatPasswordStrengthComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-password-strength', exportAs: 'matPasswordStrength', changeDetection: ChangeDetectionStrategy.OnPush, providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: forwardRef(() => MatPasswordStrengthComponent),\n                            multi: true\n                        }\n                    ], template: \"<mat-progress-bar [color]=\\\"color\\\"\\n                  [value]=\\\"strength\\\"\\n                  mode=\\\"determinate\\\">\\n</mat-progress-bar>\\n\", styles: [\".green :host::ng-deep .mat-progress-bar.mat-primary .mat-progress-bar-fill:after{background-color:#43a047}\\n\"] }]\n        }], propDecorators: { password: [{\n                type: Input\n            }], externalError: [{\n                type: Input\n            }], enableLengthRule: [{\n                type: Input\n            }], enableLowerCaseLetterRule: [{\n                type: Input\n            }], enableUpperCaseLetterRule: [{\n                type: Input\n            }], enableDigitRule: [{\n                type: Input\n            }], enableSpecialCharRule: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], customValidator: [{\n                type: Input\n            }], warnThreshold: [{\n                type: Input\n            }], accentThreshold: [{\n                type: Input\n            }], onStrengthChanged: [{\n                type: Output\n            }] } });\n\nfunction flipIn(timing, rotateX, rotateY) {\n    const params = { timing: timing, delay: 0, rotateX, rotateY };\n    return animation([\n        style({ 'backface-visibility': 'visible' }),\n        animate('{{ timing }}s {{ delay }}s ease-in', keyframes([\n            style({\n                opacity: 0,\n                transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 90deg)',\n                offset: 0,\n            }),\n            style({\n                opacity: 1,\n                transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -20deg)',\n                offset: 0.4,\n            }),\n            style({\n                transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 10deg)',\n                offset: 0.6,\n            }),\n            style({\n                transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -5deg)',\n                offset: 0.8,\n            }),\n            style({\n                transform: 'perspective(400px) rotate3d(0, 0, 0, 0)',\n                offset: 1,\n            }),\n        ])),\n    ], { params });\n}\nconst flipInX = flipIn(1, 1, 0);\nconst flipInY = flipIn(1, 0, 1);\nconst shake = animation(animate('{{ timing }}s {{ delay }}s', keyframes([\n    style({ transform: 'translate3d(0, 0, 0)', offset: 0 }),\n    style({ transform: 'translate3d(-10px, 0, 0)', offset: 0.1 }),\n    style({ transform: 'translate3d(10px, 0, 0)', offset: 0.2 }),\n    style({ transform: 'translate3d(-10px, 0, 0)', offset: 0.3 }),\n    style({ transform: 'translate3d(10px, 0, 0)', offset: 0.4 }),\n    style({ transform: 'translate3d(-10px, 0, 0)', offset: 0.5 }),\n    style({ transform: 'translate3d(10px, 0, 0)', offset: 0.6 }),\n    style({ transform: 'translate3d(-10px, 0, 0)', offset: 0.7 }),\n    style({ transform: 'translate3d(10px, 0, 0)', offset: 0.8 }),\n    style({ transform: 'translate3d(-10px, 0, 0)', offset: 0.9 }),\n    style({ transform: 'translate3d(0, 0, 0)', offset: 1 }),\n])), { params: { timing: 1, delay: 0 } });\n\nclass MatPasswordStrengthInfoComponent {\n    constructor() {\n        this.enableScoreInfo = false;\n        this.lowerCaseCriteriaMsg = 'contains at least one lower character';\n        this.upperCaseCriteriaMsg = 'contains at least one upper character';\n        this.digitsCriteriaMsg = 'contains at least one digit character';\n        this.specialCharsCriteriaMsg = 'contains at least one special character';\n        this.customCharsCriteriaMsg = 'contains at least one custom character';\n        this.matIconDone = 'done';\n        this.matIconError = 'error';\n    }\n    ngOnInit() {\n        if (!this.minCharsCriteriaMsg) {\n            this.minCharsCriteriaMsg = `contains at least ${this.passwordComponent.min} characters`;\n        }\n    }\n}\nMatPasswordStrengthInfoComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: MatPasswordStrengthInfoComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nMatPasswordStrengthInfoComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.2\", type: MatPasswordStrengthInfoComponent, selector: \"mat-password-strength-info\", inputs: { passwordComponent: \"passwordComponent\", enableScoreInfo: \"enableScoreInfo\", lowerCaseCriteriaMsg: \"lowerCaseCriteriaMsg\", upperCaseCriteriaMsg: \"upperCaseCriteriaMsg\", digitsCriteriaMsg: \"digitsCriteriaMsg\", specialCharsCriteriaMsg: \"specialCharsCriteriaMsg\", customCharsCriteriaMsg: \"customCharsCriteriaMsg\", minCharsCriteriaMsg: \"minCharsCriteriaMsg\", matIconDone: \"matIconDone\", matIconError: \"matIconError\" }, exportAs: [\"matPasswordStrengthInfo\"], ngImport: i0, template: \"<mat-card @list>\\n  <mat-card-content>\\n    <div *ngIf=\\\"passwordComponent.enableLowerCaseLetterRule\\\" @items class=\\\"info-row\\\">\\n      <div *ngIf=\\\"passwordComponent.containAtLeastOneLowerCaseLetter; then done else error\\\" @flipY>\\n      </div>\\n      <ng-template #done>\\n        <mat-icon @positiveState color=\\\"primary\\\">{{matIconDone}}</mat-icon>\\n      </ng-template>\\n      <ng-template #error>\\n        <mat-icon @negativeState color=\\\"warn\\\">{{matIconError}}</mat-icon>\\n      </ng-template>\\n      <span>{{lowerCaseCriteriaMsg}}</span>\\n    </div>\\n\\n    <div *ngIf=\\\"passwordComponent.enableUpperCaseLetterRule\\\" @items class=\\\"info-row\\\">\\n      <div *ngIf=\\\"passwordComponent.containAtLeastOneUpperCaseLetter; then done else error\\\">\\n      </div>\\n      <ng-template #done>\\n        <mat-icon @positiveState color=\\\"primary\\\">{{matIconDone}}</mat-icon>\\n      </ng-template>\\n      <ng-template #error>\\n        <mat-icon @negativeState color=\\\"warn\\\">{{matIconError}}</mat-icon>\\n      </ng-template>\\n      <span>{{upperCaseCriteriaMsg}}</span>\\n    </div>\\n\\n    <div *ngIf=\\\"passwordComponent.enableDigitRule\\\" @items class=\\\"info-row\\\">\\n      <div *ngIf=\\\"passwordComponent.containAtLeastOneDigit; then done else error\\\">\\n      </div>\\n      <ng-template #done>\\n        <mat-icon @positiveState color=\\\"primary\\\">{{matIconDone}}</mat-icon>\\n      </ng-template>\\n      <ng-template #error>\\n        <mat-icon @negativeState color=\\\"warn\\\">{{matIconError}}</mat-icon>\\n      </ng-template>\\n      <span>{{digitsCriteriaMsg}}</span>\\n    </div>\\n\\n    <div *ngIf=\\\"passwordComponent.enableSpecialCharRule\\\" @items class=\\\"info-row\\\">\\n      <div *ngIf=\\\"passwordComponent.containAtLeastOneSpecialChar; then done else error\\\">\\n      </div>\\n      <ng-template #done>\\n        <mat-icon @positiveState color=\\\"primary\\\">{{matIconDone}}</mat-icon>\\n      </ng-template>\\n      <ng-template #error>\\n        <mat-icon @negativeState color=\\\"warn\\\">{{matIconError}}</mat-icon>\\n      </ng-template>\\n      <span>{{specialCharsCriteriaMsg}}</span>\\n    </div>\\n\\n    <div *ngIf=\\\"passwordComponent.enableLengthRule\\\" @items class=\\\"info-row\\\">\\n      <div *ngIf=\\\"passwordComponent.containAtLeastMinChars; then done else error\\\">\\n      </div>\\n      <ng-template #done>\\n        <mat-icon @positiveState color=\\\"primary\\\">{{matIconDone}}</mat-icon>\\n      </ng-template>\\n      <ng-template #error>\\n        <mat-icon @negativeState color=\\\"warn\\\">{{matIconError}}</mat-icon>\\n      </ng-template>\\n      <span>{{minCharsCriteriaMsg}}</span>\\n    </div>\\n\\n    <div *ngIf=\\\"passwordComponent.customValidator\\\" @items class=\\\"info-row\\\">\\n      <div *ngIf=\\\"passwordComponent.containAtCustomChars; then done else error\\\">\\n      </div>\\n      <ng-template #done>\\n        <mat-icon @positiveState color=\\\"primary\\\">{{matIconDone}}</mat-icon>\\n      </ng-template>\\n      <ng-template #error>\\n        <mat-icon @negativeState color=\\\"warn\\\">{{matIconError}}</mat-icon>\\n      </ng-template>\\n      <span>{{customCharsCriteriaMsg}}</span>\\n    </div>\\n\\n    <div *ngIf=\\\"enableScoreInfo\\\" @items class=\\\"info-row\\\">\\n      <div *ngIf=\\\"passwordComponent.strength === 100; then done else error\\\">\\n      </div>\\n      <ng-template #done>\\n        <mat-icon @positiveState color=\\\"primary\\\">{{matIconDone}}</mat-icon>\\n      </ng-template>\\n      <ng-template #error>\\n        <mat-icon @negativeState color=\\\"warn\\\">{{matIconError}}</mat-icon>\\n      </ng-template>\\n      <span>Password's strength = {{passwordComponent.strength}} %100</span>\\n    </div>\\n\\n  </mat-card-content>\\n</mat-card>\", styles: [\"mat-card{flex-direction:row;box-sizing:border-box;display:flex;place-content:stretch center;align-items:stretch;flex:1 1 0}mat-card mat-card-content{flex-direction:column;box-sizing:border-box;display:flex;max-width:100%;place-content:stretch flex-start;align-items:stretch}mat-card mat-card-content mat-icon{margin-right:10px}mat-card mat-card-content .info-row{flex-direction:row;box-sizing:border-box;display:flex;align-items:center}\\n\"], components: [{ type: i1$2.MatCard, selector: \"mat-card\", exportAs: [\"matCard\"] }, { type: i1.MatIcon, selector: \"mat-icon\", inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"], exportAs: [\"matIcon\"] }], directives: [{ type: i1$2.MatCardContent, selector: \"mat-card-content, [mat-card-content], [matCardContent]\" }, { type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], animations: [\n        // nice stagger effect when showing existing elements\n        trigger('list', [\n            transition(':enter', [\n                // child animation selector + stagger\n                query('@items', stagger(300, animateChild()))\n            ]),\n        ]),\n        trigger('items', [\n            // cubic-bezier for a tiny bouncing feel\n            transition(':enter', [\n                style({ transform: 'scale(0.5)', opacity: 0 }),\n                animate('1s cubic-bezier(.8,-0.6,0.2,1.5)', style({ transform: 'scale(1)', opacity: 1 }))\n            ]),\n            transition(':leave', [\n                style({ transform: 'scale(1)', opacity: 1, height: '*' }),\n                animate('1s cubic-bezier(.8,-0.6,0.2,1.5)', style({ transform: 'scale(0.5)', opacity: 0, height: '0px', margin: '0px' }))\n            ]),\n        ]),\n        trigger('positiveState', [\n            transition(':enter', [\n                style({ 'backface-visibility': 'visible' }),\n                animate('{{ timing }}s {{ delay }}s ease-in', keyframes([\n                    style({\n                        opacity: 0,\n                        transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 90deg)',\n                        offset: 0,\n                    }),\n                    style({\n                        opacity: 1,\n                        transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -20deg)',\n                        offset: 0.4,\n                    }),\n                    style({\n                        transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 10deg)',\n                        offset: 0.6,\n                    }),\n                    style({\n                        transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -5deg)',\n                        offset: 0.8,\n                    }),\n                    style({\n                        transform: 'perspective(400px) rotate3d(0, 0, 0, 0)',\n                        offset: 1,\n                    }),\n                ])),\n            ], { params: { timing: 1, delay: 0, rotateX: 1, rotateY: 0 } }),\n        ]),\n        trigger('negativeState', [\n            transition(':enter', useAnimation(shake)),\n        ]),\n    ] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: MatPasswordStrengthInfoComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-password-strength-info', exportAs: 'matPasswordStrengthInfo', animations: [\n                        // nice stagger effect when showing existing elements\n                        trigger('list', [\n                            transition(':enter', [\n                                // child animation selector + stagger\n                                query('@items', stagger(300, animateChild()))\n                            ]),\n                        ]),\n                        trigger('items', [\n                            // cubic-bezier for a tiny bouncing feel\n                            transition(':enter', [\n                                style({ transform: 'scale(0.5)', opacity: 0 }),\n                                animate('1s cubic-bezier(.8,-0.6,0.2,1.5)', style({ transform: 'scale(1)', opacity: 1 }))\n                            ]),\n                            transition(':leave', [\n                                style({ transform: 'scale(1)', opacity: 1, height: '*' }),\n                                animate('1s cubic-bezier(.8,-0.6,0.2,1.5)', style({ transform: 'scale(0.5)', opacity: 0, height: '0px', margin: '0px' }))\n                            ]),\n                        ]),\n                        trigger('positiveState', [\n                            transition(':enter', [\n                                style({ 'backface-visibility': 'visible' }),\n                                animate('{{ timing }}s {{ delay }}s ease-in', keyframes([\n                                    style({\n                                        opacity: 0,\n                                        transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 90deg)',\n                                        offset: 0,\n                                    }),\n                                    style({\n                                        opacity: 1,\n                                        transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -20deg)',\n                                        offset: 0.4,\n                                    }),\n                                    style({\n                                        transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 10deg)',\n                                        offset: 0.6,\n                                    }),\n                                    style({\n                                        transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -5deg)',\n                                        offset: 0.8,\n                                    }),\n                                    style({\n                                        transform: 'perspective(400px) rotate3d(0, 0, 0, 0)',\n                                        offset: 1,\n                                    }),\n                                ])),\n                            ], { params: { timing: 1, delay: 0, rotateX: 1, rotateY: 0 } }),\n                        ]),\n                        trigger('negativeState', [\n                            transition(':enter', useAnimation(shake)),\n                        ]),\n                    ], template: \"<mat-card @list>\\n  <mat-card-content>\\n    <div *ngIf=\\\"passwordComponent.enableLowerCaseLetterRule\\\" @items class=\\\"info-row\\\">\\n      <div *ngIf=\\\"passwordComponent.containAtLeastOneLowerCaseLetter; then done else error\\\" @flipY>\\n      </div>\\n      <ng-template #done>\\n        <mat-icon @positiveState color=\\\"primary\\\">{{matIconDone}}</mat-icon>\\n      </ng-template>\\n      <ng-template #error>\\n        <mat-icon @negativeState color=\\\"warn\\\">{{matIconError}}</mat-icon>\\n      </ng-template>\\n      <span>{{lowerCaseCriteriaMsg}}</span>\\n    </div>\\n\\n    <div *ngIf=\\\"passwordComponent.enableUpperCaseLetterRule\\\" @items class=\\\"info-row\\\">\\n      <div *ngIf=\\\"passwordComponent.containAtLeastOneUpperCaseLetter; then done else error\\\">\\n      </div>\\n      <ng-template #done>\\n        <mat-icon @positiveState color=\\\"primary\\\">{{matIconDone}}</mat-icon>\\n      </ng-template>\\n      <ng-template #error>\\n        <mat-icon @negativeState color=\\\"warn\\\">{{matIconError}}</mat-icon>\\n      </ng-template>\\n      <span>{{upperCaseCriteriaMsg}}</span>\\n    </div>\\n\\n    <div *ngIf=\\\"passwordComponent.enableDigitRule\\\" @items class=\\\"info-row\\\">\\n      <div *ngIf=\\\"passwordComponent.containAtLeastOneDigit; then done else error\\\">\\n      </div>\\n      <ng-template #done>\\n        <mat-icon @positiveState color=\\\"primary\\\">{{matIconDone}}</mat-icon>\\n      </ng-template>\\n      <ng-template #error>\\n        <mat-icon @negativeState color=\\\"warn\\\">{{matIconError}}</mat-icon>\\n      </ng-template>\\n      <span>{{digitsCriteriaMsg}}</span>\\n    </div>\\n\\n    <div *ngIf=\\\"passwordComponent.enableSpecialCharRule\\\" @items class=\\\"info-row\\\">\\n      <div *ngIf=\\\"passwordComponent.containAtLeastOneSpecialChar; then done else error\\\">\\n      </div>\\n      <ng-template #done>\\n        <mat-icon @positiveState color=\\\"primary\\\">{{matIconDone}}</mat-icon>\\n      </ng-template>\\n      <ng-template #error>\\n        <mat-icon @negativeState color=\\\"warn\\\">{{matIconError}}</mat-icon>\\n      </ng-template>\\n      <span>{{specialCharsCriteriaMsg}}</span>\\n    </div>\\n\\n    <div *ngIf=\\\"passwordComponent.enableLengthRule\\\" @items class=\\\"info-row\\\">\\n      <div *ngIf=\\\"passwordComponent.containAtLeastMinChars; then done else error\\\">\\n      </div>\\n      <ng-template #done>\\n        <mat-icon @positiveState color=\\\"primary\\\">{{matIconDone}}</mat-icon>\\n      </ng-template>\\n      <ng-template #error>\\n        <mat-icon @negativeState color=\\\"warn\\\">{{matIconError}}</mat-icon>\\n      </ng-template>\\n      <span>{{minCharsCriteriaMsg}}</span>\\n    </div>\\n\\n    <div *ngIf=\\\"passwordComponent.customValidator\\\" @items class=\\\"info-row\\\">\\n      <div *ngIf=\\\"passwordComponent.containAtCustomChars; then done else error\\\">\\n      </div>\\n      <ng-template #done>\\n        <mat-icon @positiveState color=\\\"primary\\\">{{matIconDone}}</mat-icon>\\n      </ng-template>\\n      <ng-template #error>\\n        <mat-icon @negativeState color=\\\"warn\\\">{{matIconError}}</mat-icon>\\n      </ng-template>\\n      <span>{{customCharsCriteriaMsg}}</span>\\n    </div>\\n\\n    <div *ngIf=\\\"enableScoreInfo\\\" @items class=\\\"info-row\\\">\\n      <div *ngIf=\\\"passwordComponent.strength === 100; then done else error\\\">\\n      </div>\\n      <ng-template #done>\\n        <mat-icon @positiveState color=\\\"primary\\\">{{matIconDone}}</mat-icon>\\n      </ng-template>\\n      <ng-template #error>\\n        <mat-icon @negativeState color=\\\"warn\\\">{{matIconError}}</mat-icon>\\n      </ng-template>\\n      <span>Password's strength = {{passwordComponent.strength}} %100</span>\\n    </div>\\n\\n  </mat-card-content>\\n</mat-card>\", styles: [\"mat-card{flex-direction:row;box-sizing:border-box;display:flex;place-content:stretch center;align-items:stretch;flex:1 1 0}mat-card mat-card-content{flex-direction:column;box-sizing:border-box;display:flex;max-width:100%;place-content:stretch flex-start;align-items:stretch}mat-card mat-card-content mat-icon{margin-right:10px}mat-card mat-card-content .info-row{flex-direction:row;box-sizing:border-box;display:flex;align-items:center}\\n\"] }]\n        }], propDecorators: { passwordComponent: [{\n                type: Input\n            }], enableScoreInfo: [{\n                type: Input\n            }], lowerCaseCriteriaMsg: [{\n                type: Input\n            }], upperCaseCriteriaMsg: [{\n                type: Input\n            }], digitsCriteriaMsg: [{\n                type: Input\n            }], specialCharsCriteriaMsg: [{\n                type: Input\n            }], customCharsCriteriaMsg: [{\n                type: Input\n            }], minCharsCriteriaMsg: [{\n                type: Input\n            }], matIconDone: [{\n                type: Input\n            }], matIconError: [{\n                type: Input\n            }] } });\n\nclass MatPasswordStrengthModule {\n    static forRoot() {\n        return {\n            ngModule: MatPasswordStrengthModule,\n            providers: []\n        };\n    }\n}\nMatPasswordStrengthModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: MatPasswordStrengthModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatPasswordStrengthModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: MatPasswordStrengthModule, declarations: [MatPasswordStrengthComponent,\n        MatPasswordStrengthInfoComponent,\n        MatPassToggleVisibilityComponent], imports: [CommonModule,\n        MatProgressBarModule,\n        MatCardModule,\n        MatIconModule,\n        MatRippleModule], exports: [MatPasswordStrengthComponent,\n        MatPasswordStrengthInfoComponent,\n        MatPassToggleVisibilityComponent] });\nMatPasswordStrengthModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: MatPasswordStrengthModule, imports: [[\n            CommonModule,\n            MatProgressBarModule,\n            MatCardModule,\n            MatIconModule,\n            MatRippleModule\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: MatPasswordStrengthModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        MatProgressBarModule,\n                        MatCardModule,\n                        MatIconModule,\n                        MatRippleModule\n                    ],\n                    exports: [\n                        MatPasswordStrengthComponent,\n                        MatPasswordStrengthInfoComponent,\n                        MatPassToggleVisibilityComponent\n                    ],\n                    declarations: [\n                        MatPasswordStrengthComponent,\n                        MatPasswordStrengthInfoComponent,\n                        MatPassToggleVisibilityComponent\n                    ]\n                }]\n        }] });\n\n/*\n * Public API Surface of password-strength\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Colors, Criteria, MatPassToggleVisibilityComponent, MatPasswordStrengthComponent, MatPasswordStrengthInfoComponent, MatPasswordStrengthModule, MatPasswordStrengthValidator, RegExpValidator, flipIn, flipInX, flipInY, shake };\n"]},"metadata":{},"sourceType":"module"}