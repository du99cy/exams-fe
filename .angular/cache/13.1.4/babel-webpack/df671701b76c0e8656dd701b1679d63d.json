{"ast":null,"code":"import { mapToFormData } from '@core/utilities/helpers';\nimport { api_urls } from '@shared/configs/api_url';\nimport { BehaviorSubject, concatMap, EMPTY, first, from, map, of } from 'rxjs';\nimport { ACCESS_TOKEN } from './constant';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst BASE_URL = api_urls.LOCAL_API_URL;\nconst routes = {\n  login: `${BASE_URL}/auth/token`,\n  refreshToken: `${BASE_URL}/auth/refresh-token`,\n  userInfor: `${BASE_URL}/auth/users/me/`,\n  facebookAuthentication: `${BASE_URL}/auth/facebook-authenticate`\n};\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(httpClient, router) {\n      this.httpClient = httpClient;\n      this.router = router; //initialize\n\n      this.EXPIRE_TOKEN_TIME_SECONDS = 0;\n      this.REMAIN_TIME_TO_REFRESH_TOKEN_SECONDS = 120;\n      this.userSubject = new BehaviorSubject(null);\n    }\n\n    set User(data) {\n      this.userSubject.next(data);\n    }\n\n    get User() {\n      return this.userSubject.value;\n    }\n\n    get UserObservable() {\n      return this.userSubject.asObservable();\n    }\n\n    login(loginDataFormValue) {\n      let loginFormData = mapToFormData(loginDataFormValue);\n      return this.httpClient.post(routes.login, loginFormData, {\n        withCredentials: true\n      }).pipe(first(), map(res => {\n        //save user current\n        this.User = res.user_infor; //save expire token time\n\n        this.EXPIRE_TOKEN_TIME_SECONDS = res.expire_token_time_minutes * 60; //encode acccess token\n\n        let accessToken = res.access_token;\n        this.saveAccessTokenInLocalStorage(accessToken);\n      }));\n    }\n\n    logout() {\n      //if facebook account\n      if (this.User.account_type == 'facebook') {\n        this.logoutFBAccount();\n      }\n\n      this.User = null;\n      this.stopRefreshTokenTimer();\n      localStorage.removeItem(ACCESS_TOKEN); //this.router.navigateByUrl('/login');\n    }\n\n    refreshToken() {\n      return this.httpClient.get(routes.refreshToken, {\n        withCredentials: true\n      }).pipe(first(), map(res => {\n        this.EXPIRE_TOKEN_TIME_SECONDS = res.expire_token_time_minutes * 60;\n        this.saveAccessTokenInLocalStorage(res.access_token);\n      }));\n    }\n\n    userInfor() {\n      return this.httpClient.get(routes.userInfor, {\n        withCredentials: true\n      }).pipe(first(), map(res => {\n        let userData = res.data;\n        this.User = userData;\n      }));\n    } //save token to local storage and ser up time to refresh token\n\n\n    saveAccessTokenInLocalStorage(accessToken) {\n      //encode access token\n      let accessTokenEncode = btoa(accessToken); //save to localStorage\n\n      localStorage.setItem(ACCESS_TOKEN, JSON.stringify(accessTokenEncode)); //refresh token\n\n      this.startRefreshTokenTimer();\n    }\n\n    getAccesTokenFromLocalStorage() {\n      const accessTokenEncodeJson = localStorage.getItem(ACCESS_TOKEN);\n\n      if (accessTokenEncodeJson != null) {\n        let accessTokenEncode = JSON.parse(accessTokenEncodeJson);\n        return atob(accessTokenEncode);\n      }\n\n      return null;\n    }\n\n    startRefreshTokenTimer() {\n      //get new token when remain 2 mintutes\n      const timeout = (this.EXPIRE_TOKEN_TIME_SECONDS - this.REMAIN_TIME_TO_REFRESH_TOKEN_SECONDS) * 1000;\n      this.refreshTokenTimeout = setTimeout(() => this.refreshToken().subscribe(), timeout);\n    }\n\n    stopRefreshTokenTimer() {\n      clearTimeout(this.refreshTokenTimeout);\n    } //facebook login\n\n\n    loginByFacebookAccount() {\n      // login with facebook then authenticate with the API to get a JWT auth token\n      return this.facebookLogin().pipe(concatMap(accessToken => this.apiAuthenticateFB(accessToken))).pipe(first());\n    }\n\n    facebookLogin() {\n      // login with facebook and return observable with fb access token on success\n      return from(new Promise(resolve => FB.login(resolve, {// scope: '',\n        // return_scopes:true,\n      }))).pipe(concatMap(({\n        authResponse\n      }) => {\n        if (!authResponse) return EMPTY;\n        return of(authResponse.accessToken);\n      }));\n    }\n\n    apiAuthenticateFB(accessToken) {\n      // authenticate with the api using a facebook access token,\n      // on success the api returns an account object with a JWT auth token\n      return this.httpClient.post(routes.facebookAuthentication, accessToken).pipe(map(res => {\n        if (res.status_code == 200) {\n          const res_data = res.data; //set user for global\n\n          this.User = res.status_code == 200 ? res_data.user_infor : null; //set time to get new token(refresh token)\n          //save expire token time\n\n          this.EXPIRE_TOKEN_TIME_SECONDS = res_data.expire_token_time_minutes * 60; //encode acccess token\n\n          let accessToken = res_data.access_token;\n          this.saveAccessTokenInLocalStorage(accessToken);\n        }\n\n        return res;\n      }));\n    }\n\n    logoutFBAccount() {\n      // revoke app permissions to logout completely because FB.logout() doesn't remove FB cookie\n      FB.api('/me/permissions', 'delete', null, () => FB.logout()); // this.stopAuthenticateTimer();\n      // this.accountSubject.next(null);\n      // this.router.navigate(['/login']);\n    } //\n\n\n    ngOnDestroy() {\n      this.stopRefreshTokenTimer();\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}